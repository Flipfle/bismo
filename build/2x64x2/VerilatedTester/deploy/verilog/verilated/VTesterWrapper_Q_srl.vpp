`begin_keywords "1800-2017"
`line 1 "Q_srl.v" 1
 
 

`line 4 "Q_srl.v" 0
 
 
 
 
 

`line 10 "Q_srl.v" 0
 
 
 

`line 14 "Q_srl.v" 0
 
 
 
 
 

`line 20 "Q_srl.v" 0
 
 
 
 
 

`line 26 "Q_srl.v" 0
 
 
 
 
 


`line 33 "Q_srl.v" 0
 

`line 35 "Q_srl.v" 0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

`line 58 "Q_srl.v" 0
 
 
 
 
 
 
 
 

`line 67 "Q_srl.v" 0
 
 


`line 71 "Q_srl.v" 0
  

`line 73 "Q_srl.v" 0
 

`line 75 "Q_srl.v" 0
`timescale 1 ns / 1 ps 

`line 77 "Q_srl.v" 0
module Q_srl (clock, reset, i_d, i_v, i_b, o_d, o_v, o_b, count);

`line 79 "Q_srl.v" 0
   parameter depth = 16;    
   parameter width = 16;    

`line 82 "Q_srl.v" 0
    










`line 93 "Q_srl.v" 0
 

`line 95 "Q_srl.v" 0
   parameter addrwidth =
		(  (((depth))     ==0) ? 0	 
		 : (((depth-1)>>0)==0) ? 0	 
		 : (((depth-1)>>1)==0) ? 1	 
		 : (((depth-1)>>2)==0) ? 2	 
		 : (((depth-1)>>3)==0) ? 3	 
		 : (((depth-1)>>4)==0) ? 4	 
		 : (((depth-1)>>5)==0) ? 5	 
		 : (((depth-1)>>6)==0) ? 6	 
		 : (((depth-1)>>7)==0) ? 7	 
		 :                       8)	 
		 ;

`line 108 "Q_srl.v" 0
   input     clock;
   input     reset;

`line 111 "Q_srl.v" 0
   input  [width-1:0] i_d;	 
   input              i_v;	 
   output             i_b;	 

`line 115 "Q_srl.v" 0
   output [width-1:0] o_d;	 
   output             o_v;	 
   input              o_b;	 

`line 119 "Q_srl.v" 0
   output [addrwidth:0] count;   

`line 121 "Q_srl.v" 0
   reg    [addrwidth-1:0] addr, addr_, a_;		 
							 
   reg 			  shift_en_;			 
   reg    [width-1:0] 	  srl [depth-2:0];		 
   reg 			  shift_en_o_;			 
   reg    [width-1:0] 	  srlo_, srlo			 
			    ;

`line 129 "Q_srl.v" 0
   parameter state_empty = 2'd0;     
   parameter state_one   = 2'd1;     
   parameter state_more  = 2'd2;     
				     

`line 134 "Q_srl.v" 0
   reg [1:0] state, state_;	     

`line 136 "Q_srl.v" 0
   wire      addr_full_;	     
   reg       addr_full; 	     
   wire      addr_zero_;	     
   wire      o_v_reg_;		     
   reg       o_v_reg  		     
	       ;
   wire      i_b_reg_;		     
   reg       i_b_reg  		     
	       ;

`line 146 "Q_srl.v" 0
   assign addr_full_ = (state_==state_more) && (addr_==depth-2);
						 
   assign addr_zero_ = (addr==0);		 
   assign o_v_reg_   = (state_!=state_empty);	 
   assign i_b_reg_   = addr_full_;		 
   assign o_d = srlo;				 
   assign o_v = o_v_reg;			 
   assign i_b = i_b_reg;			 

`line 155 "Q_srl.v" 0
   assign count = (state==state_more ? addr+2 : (state==state_one ? 1 : 0));

`line 157 "Q_srl.v" 0
    
    

`line 160 "Q_srl.v" 0
   always @(posedge clock) begin	 
      if (reset) begin
	 state     <= state_empty;
	 addr      <= 0;
         addr_full <= 0;
	 o_v_reg   <= 0;
	 i_b_reg   <= 1;
      end
      else begin
	 state     <= state_;
	 addr      <= addr_;
         addr_full <= addr_full_;
	 o_v_reg   <= o_v_reg_;
	 i_b_reg   <= i_b_reg_;
      end
   end  

`line 177 "Q_srl.v" 0
   always @(posedge clock) begin	 
       
       
      if (reset) begin
	 srlo <= 0;
      end
      else begin
	 if (shift_en_o_) begin
	    srlo <= srlo_;
	 end
      end
   end  

`line 190 "Q_srl.v" 0
   always @(posedge clock) begin			 
       
       
      if (shift_en_) begin
	  
	 for (a_=depth-2; a_>0; a_=a_-1) begin
	    srl[a_] <= srl[a_-1];
	 end
	 srl[0] <= i_d;
      end
   end  

`line 202 "Q_srl.v" 0
   always @* begin					 
        srlo_       <=  'bx;
        shift_en_o_ <= 1'bx;
        shift_en_   <= 1'bx;
        addr_       <=  'bx;
        state_      <= 2'bx;
      case (state)

`line 210 "Q_srl.v" 0
	state_empty: begin		     
	      if (i_v) begin		     
		 srlo_       <= i_d;
		 shift_en_o_ <= 1;
		 shift_en_   <= 1'bx;
		 addr_       <= 0;
		 state_      <= state_one;
	      end
	      else	begin		     
		 srlo_       <= 'bx;
		 shift_en_o_ <= 0;
		 shift_en_   <= 1'bx;
		 addr_       <= 0;
		 state_      <= state_empty;
	      end
	end

`line 227 "Q_srl.v" 0
	state_one: begin		     
	      if (i_v && o_b) begin	     
		 srlo_       <= 'bx;
		 shift_en_o_ <= 0;
		 shift_en_   <= 1;
		 addr_       <= 0;
		 state_      <= state_more;
	      end
	      else if (i_v && !o_b) begin    
		 srlo_       <= i_d;
		 shift_en_o_ <= 1;
		 shift_en_   <= 1;
		 addr_       <= 0;
		 state_      <= state_one;
	      end
	      else if (!i_v && o_b) begin    
		 srlo_       <= 'bx;
		 shift_en_o_ <= 0;
		 shift_en_   <= 1'bx;
		 addr_       <= 0;
		 state_      <= state_one;
	      end
	      else if (!i_v && !o_b) begin   
		 srlo_       <= 'bx;
		 shift_en_o_ <= 0;
		 shift_en_   <= 1'bx;
		 addr_       <= 0;
		 state_      <= state_empty;
	      end
	end  

`line 258 "Q_srl.v" 0
	state_more: begin		     
	   if (addr_full || (depth==2)) begin
					     
					     
	      if (o_b) begin		     
		 srlo_       <= 'bx;
		 shift_en_o_ <= 0;
		 shift_en_   <= 0;
		 addr_       <= addr;
		 state_      <= state_more;
	      end
	      else begin		     
		 srlo_       <= srl[addr];
		 shift_en_o_ <= 1;
		 shift_en_   <= 0;
 
 
		 addr_       <= addr_zero_ ? 0         : addr-1;
		 state_      <= addr_zero_ ? state_one : state_more;
	      end
	   end
	   else begin			     
	      if (i_v && o_b) begin	     
		 srlo_       <= 'bx;
		 shift_en_o_ <= 0;
		 shift_en_   <= 1;
		 addr_       <= addr+1;
		 state_      <= state_more;
	      end
	      else if (i_v && !o_b) begin    
		 srlo_       <= srl[addr];
		 shift_en_o_ <= 1;
		 shift_en_   <= 1;
		 addr_       <= addr;
		 state_      <= state_more;
	      end
	      else if (!i_v && o_b) begin    
		 srlo_       <= 'bx;
		 shift_en_o_ <= 0;
		 shift_en_   <= 0;
		 addr_       <= addr;
		 state_      <= state_more;
	      end
	      else if (!i_v && !o_b) begin   
		 srlo_       <= srl[addr];
		 shift_en_o_ <= 1;
		 shift_en_   <= 0;
		 addr_       <= addr_zero_ ? 0         : addr-1;
		 state_      <= addr_zero_ ? state_one : state_more;
	      end
	   end  
	end  

`line 311 "Q_srl.v" 0
	default: begin
		 srlo_       <=  'bx;
		 shift_en_o_ <= 1'bx;
		 shift_en_   <= 1'bx;
		 addr_       <=  'bx;
		 state_      <= 2'bx;
	end  

`line 319 "Q_srl.v" 0
      endcase  
   end  

`line 322 "Q_srl.v" 0
endmodule  


`line 325 "Q_srl.v" 0
   

`line 327 "Q_srl.v" 2
